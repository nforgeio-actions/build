#------------------------------------------------------------------------------
# Builds a neonFORGE GitHub repo solution on a JOBRUNNER within the [C:\src] directory.
#
# This currently manages the following neonFORGE repos:
#
#   neonCLOUD           - private/enterprise code including deployment scripts
#   neonKUBE            - public neonKUBE related code
#   neonLIBRARY         - public neonLIBRARY related code
#   cadence-samples     - public Cadence sample apps
#   temporal-samples    - public Temporal sample apps

name: neon-build
description: "Builds one of the neonFORGE repos with options"
inputs:
  repo:
    description: "The repostory to build (one of: neonCLOUD, neonKUBE, neonLIBRARY, cadence-samples, or temporal-samples)"
    required: true
  build-tools:
    description: "Indicates whether tools should be built and and published to the repo's Build folder"
    required: false
    default: false
  build-installer:
    description: "Indicates whether installers should be built"
    required: false
    default: false
  build-codedoc:
    description: "Indicates whether code documentation should be built"
    required: false
    default: false
  build-log-path:
    description: "Specifies where the build log file should be written"
    required: true
outputs:
  build-error:
    description: "Returns as 'true' for build errors, 'false' otherwise"
runs:
  using: composite
  steps:
  - name: build
    shell: pwsh
    run: |
      
      # Verify that we're running on a properly configured neonFORGE jobrunner 
      # and import the deployment and action scripts from neonCLOUD.
      
      # NOTE: This assumes that the required [$NC_ROOT/Powershell/*.ps1] files
      #       in the current clone of the repo on the runner are up-to-date
      #       enough to be able to obtain secrets and use GitHub Action functions.
      #       If this is not the case, you'll have to manually pull the repo 
      #       first on the runner.
      
      $ncRoot = $env:NC_ROOT
      
      if (![System.IO.Directory]::Exists($ncRoot))
      {
          throw "Runner Config: neonCLOUD repo is not present."
      }
      
      $ncPowershell = [System.IO.Path]::Combine($ncRoot, "Powershell")
      
      Push-Location $ncPowershell
      . ./includes.ps1
      Pop-Location
      
      # Note that each repo has their own build scripts.
      
      $repo         = ${{ inputs.repo }}
      $buildLog     = "ERROR: Build was never executed."
      $buildError   = true
      $buildLogPath = ${{ inputs.build-log-path }}
      
      Switch ($repo)
      {
          "neonCLOUD"
          {
              $buildScript      = [System.IO.Path]::Combine($env:NC_TOOLBIN, "neoncloud-builder.ps1")
              $toolsOption      = ""
              $installersOption = ""
              $codeDocOption    = ""
              
              if ("${{ inputs.build-tools }}" -eq "true")
              {
                  toolsOption = "-tools"
              }
              
              if ("${{ inputs.build-installer }}" -eq "true")
              {
                  installersOption = "-installers"
              }
              
              if ("${{ inputs.build-codedoc }}" -eq "true")
              {
                  # This is currently a NOP for this repo.
              }
              
              $buildLog   = $(& pwsh $buildScript $toolsOption $installersOption $codeDocOption)
              $buildError = $?
              Break
          }
          
          "neonKUBE"
          {
              $buildScript      = [System.IO.Path]::Combine($env:NF_TOOLBIN, "neon-builder.ps1")
              $toolsOption      = ""
              $installersOption = ""
              $codeDocOption    = ""
              
              if ("${{ inputs.build-tools }}" -eq "true")
              {
                  toolsOption = "-tools"
              }
              
              if ("${{ inputs.build-installer }}" -eq "true")
              {
                  installersOption = "-installers"
              }
              
              if ("${{ inputs.build-codedoc }}" -eq "true")
              {
                  # This is currently a NOP for this repo.
              }
              
              $buildLog   = $(& pwsh $buildScript $toolsOption $installersOption $codeDocOption)
              $buildError = $?
              Break
          }
          
          "neonLIBRARY"
          {
              throw "[neonLIBRARY] build is not implemented."
              Break
          }
          
          "cadence-samples"
          {
              throw "[cadence-samples] build is not implemented."
              Break
          }
          
          "temporal-samples"
          {
              throw "[temporal-samples] build is not implemented."
              Break
          }
          
          default
          {
              throw "[$repo] is not a supported repo."
              Break
          }
          
          # Persist the build log and build error output
          
          [System.IO.File]::WriteAllText($buildLogPath, $buildLog)
          
          if ($buildError)
          {
          }
          else
          {
          }
      }
